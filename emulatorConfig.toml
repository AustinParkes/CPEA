# TODO
# 1) Find better way to ignore keys than '0xFFFF' when user doesn't want to use the key.
#

# Details code & data to be written to memory. Defines entry/exit points.
[firmware]
    [firmware.code]
    code_addr	= 0xFFFF		#
    code_size	= 0xFFFF	    # 

    # TODO: There could be multiple data sections. 
    [firmware.data]
    data_addr	= 0xFFFF		# 
    data_size	= 0xFFFF		# 
	
    [firmware.execution]
    # Currently reading Reset Handler from vector table
    entry		= 0xFFFF		# start of main
    end  		= 0xFFFF		# end of main

# Define memory map for your MCU
# Does this need to be so specific? Can we just use generic map that ARM Cortex-M specifies?
[mem_map]
# mem_map.flash
#code_addr 	= 0x00000000
#code_size 	= 0x00019000

# mem_map.sram 
#sram_addr 	= 0x02000000
#sram_size 	= 0x00020000

# ARM mmio map 0x40000000 - 0x5fffffff
[mmio]
[mmio.count]
uart_count	= 0								
gpio_count 	= 0
generic_count = 1							

    [mmio.generic]
    [mmio.generic.0]
    [mmio.generic.0.config]
    SR_count = 1
    DR_count = 0

    [mmio.generic.0.addr]
    base_addr = 0x40064000
    SR1_addr = 0x40064006

    [mmio.generic.0.reset]
    SR1_reset = 0x0

    [mmio.generic.0.flags]
    Generic_Flag1 = {reg = "SR1", bit = 4, val = 1, addr = "optional"}
    Generic_Flag2 = {reg = "SR1", bit = 3, val = 1, addr = 0x19f2}
    Generic_Flag3 = {reg = "SR1", bit = 5, val = 0, addr = "optional"}
    Generic_Flag4 = {reg = "SR1", bit = 6, val = 1, addr = "optional"}
    Generic_Flag5 = {reg = "SR1", bit = 3, val = 1, addr = 0x1aec}
    Generic_Flag6 = {reg = "SR1", bit = 3, val = 1, addr = 0x1a86}
    Generic_Flag7 = {reg = "SR1", bit = 5, val = 1, addr = 0x1a9c}




    
